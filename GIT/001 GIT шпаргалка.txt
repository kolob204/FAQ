Config 

alias gitlog='git log --graph --pretty=oneline --abbrev-commit --all --decorate'

Отображение результирующего конфига
git config --list

Глобальный конфиг
%userprofile%\AppData\Local\Programs\Git\etc\.gitconfig 

Локальный конфиг (находится в индивидуальной  папке каждого проекта /.git/congig)

Для русских шрифтов в коммитах нужно отредактировать файл настроек GIT
 файл настроек 

  // Устаревшие рекомендации******
создаём секцию (если нет)
[i18n]
commitencoding = utf8 
logoutputencoding = cp1251


либо таую рекомендацию видел
commitencoding = cp1251
logoutputencoding = cp866


Переменная окружения для less (нужно либо её устанавливать каждый раз при запуске git bash,
либо настроить запуск git bash так , чтобы эта переменная устанавливалась предварительно)
@set LESSCHARSET=utf-8

******

если выполнив команды

git config —global —unset i18n.commitencoding
git config —global —unset i18n.logoutputencoding

По умолчанию будет использоваться кодировка utf-8 (что является лучшим вариантом, для совместного использования кода
проектов между Windows и Linux системами)

ЧТО СОБСТВЕННО И НУЖНО СДЕЛАТЬ.
А если есть проблемы с отображением кодировок - надо было сразу конфигурировать свою ИДЕ на использование UTF-8
в качестве кодировки по умолчанию.

Можно выполнить 
git config --global gui.encoding utf-8
но по идее, если в конфиге не прописать никаких настроек GIT и так будет использовать UTF-8
========================================================
PROXY

Configure
git config --global http.proxy http://frolov_vi:password@ws-wcg:80

Reset
git config --global --unset http.proxy
========================================================

git init
git add .
git commit -m "need to refactor"
gitlog   (PS Это вывод по ранее сконфигурированному Алиасу. Для вывода ограниченного кол-ва веток:  gitlog -5)

Обычно, без алиасов, используют ещё такой вариант
git log --oneline --all

=======
Создаём ветку
git checkout -b имя-новой-ветки

Переключаемся на нужную ветку
git checkout master
git checkout garbageway



=======
Обмен с коллегами

git push origin название-текущей-ветки
     где origin означает репозиторий, который был склонирован на компьютер


git pull origin - обновляем все ветки из удалённого репозитория в локальный
git pull origin master - обновляем ветку MASTER (или пишем название другой ветки при необходимости)


=======
info

git branch - Показывает ветки и активную


=======
Если в репозиторий попали какие то ненужные файлы, которые вы забыли в gitignore
Даже если вы потом укажите их в гитигноре, они всё равно будут коммитится, потому что они уже есть в истории
Чтобы избавится от них, делаем так:

Удаление из кэша GIT не нужных файлов

git rm --cached allure-results/ -r

После этого будет правильно обрабатываться gitignore
=======



