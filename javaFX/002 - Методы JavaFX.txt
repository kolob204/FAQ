
==================================================================================
Поверх окон

Основное окно

@Override
	public void start(Stage primaryStage) {
	
	primaryStage.setAlwaysOnTop(true);

Диалог

Метод 1

	JFrame jf = new JFrame();
	jf.setAlwaysOnTop(true);

	JOptionPane.showMessageDialog(jf, "Все операции выполнены", "Готово",JOptionPane.INFORMATION_MESSAGE);

Метод 2

JOptionPane optionPane = new JOptionPane();
JDialog dialog = optionPane.createDialog("Title");
dialog.setAlwaysOnTop(alwaysOnTop);
dialog.setVisible(true);
										
==================================================================================
Действия после инициализации
After Init


метод 1


	primaryStage.addEventHandler(WindowEvent.WINDOW_SHOWN, new EventHandler<WindowEvent>() {
		@Override
		public void handle(WindowEvent window) {

			JOptionPane.showMessageDialog(null, "Приложение загружено","Старт",
					JOptionPane.INFORMATION_MESSAGE);

		}
	});

	primaryStage.show();
										
										
==================================================================================										
открыть файл
openFileDialog

с фильтром выбора

//Create a file chooser
	final JFileChooser fc = new JFileChooser();
	
	
	FileFilter filter = new FileNameExtensionFilter("EXCEL File", "xlsx");
	fc.setFileFilter(filter);
	int returnVal = fc.showOpenDialog(frameOnTop);

==================================================================================												

Индикатор выполнения задач
ProgressBar  .  ProgressIndicator


1   заводим на интерфейсе их. делаем невидимыми, пока не запустится нужный процесс

<ProgressBar fx:id="MyProgressBar" layoutX="14.0" layoutY="266.0" prefWidth="200.0" progress="0.0" visible="false"/>
<ProgressIndicator fx:id="MyProgressIndicator" layoutX="226.0" layoutY="264.0" progress="0.0"  visible="false" />
**************************************
2  Создаём класс процесса, с логикой
**************************************
package runner;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Iterator;
import java.util.List;

import javafx.concurrent.Task;

public class ExcelHandler extends Task<List<File>> {

	private File inputFile;   // заводим какие то переменные, которые будут поступа на вход конструктора, при запуске процесса
	private File outputFile;

	public ExcelHandler(File inputFile, File outputFile) {
		this.inputFile = inputFile;
		this.outputFile = outputFile;
	}

	@Override
	protected List<File> call() throws Exception {

		//логика
		String s = inputFile.getPath(); // ну типа работаем как то с переменными ))))
		s.lenght();
		
		return null;
	}

}

**************************************
3 В контроллере пишем Listner на кнопку, запускающую процесс


executeAlgoritm.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {

				MyProgressBar.setVisible(true);        // при запуске - показываем прогресс бар и индикатор
				MyProgressIndicator.setVisible(true);

				if (MyProgressBar.progressProperty().isBound()) {
					MyProgressBar.progressProperty().unbind();
				}

				if (MyProgressIndicator.progressProperty().isBound()) {
					MyProgressIndicator.progressProperty().unbind();
				}
				MyProgressBar.setProgress(0);
				MyProgressIndicator.setProgress(0);
				executeAlgoritm.setDisable(true);

				ExcelHandler excelHandler = new ExcelHandler(inputFile, outputFile);

				MyProgressBar.progressProperty().unbind();

				// Bind progress property
				MyProgressBar.progressProperty().bind(excelHandler.progressProperty());

				MyProgressIndicator.progressProperty().unbind();

				// Bind progress property.
				MyProgressIndicator.progressProperty().bind(excelHandler.progressProperty());

				//действия после завершения процесса
				excelHandler.addEventHandler(WorkerStateEvent.WORKER_STATE_SUCCEEDED, //
						new EventHandler<WorkerStateEvent>() {

							@Override
							public void handle(WorkerStateEvent t) {

								JOptionPane.showMessageDialog(frameOnTop, "Все операции выполнены", "Готово",
										JOptionPane.INFORMATION_MESSAGE);

								MyProgressBar.setVisible(false);       // прячем прогресс бар после отработки
								MyProgressIndicator.setVisible(false);

							}

						});

				new Thread(excelHandler).start();

			}
		});



**************************************
			
==================================================================================												

relative element width
динамическое изменение размеров элементов относительно размера главного окна


import javafx.stage.Stage;

private Stage stage;


пробовал вызывать этот метод в Инициализации, но выпадает ошибка NULL
так как идёт попытка инициализировать Листнер до появления самих элементов
поэтому вызывал метод setStage уже по кнопке

private void setStage() {

		stage = (Stage) mainVbox.getScene().getWindow();

		stage.widthProperty().addListener(new ChangeListener<Number>() {

			@Override
			public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
	
				if (prefsPane.isVisible()) {

					prefsPane.setPrefWidth(newValue.intValue() - 35);

					btnSave.setLayoutX(newValue.intValue() - 330);
					btnCancel.setLayoutX(newValue.intValue() - 100);
				}

			}
		});

	}


	@FXML
	public void showPrefs(ActionEvent event) throws IOException, URISyntaxException {

		setStage();
		.....
		
	}

==================================================================================												
Картинки  (Для информации: у них нет ToolTip)

Шаблон

 <ImageView fx:id="Test009_img" fitHeight="20" fitWidth="20" layoutX="5" layoutY="174" />


Контроллер

		File file = new File("src/main/resources/info.png");
		Image image = new Image(file.toURI().toString());

		Test009_img.setImage(image);

==================================================================================												
Сделлать disable элемент визуально Enabled (но по сути он запрещён)

setStyle("-fx-opacity: 1");


==================================================================================												